enum weather 
{ 
	sunny = 1,
	cloudy,
	cold
};

enum week 
{ 
	sunday,
	monday
};

const PI = 3.14;
const PISQ = 3.14 * 3.14d;

const stackSize : int = 256;

var global : bool = true;

var notInitilazed : int;

var ch : char = 'w';

struct People {
	id, age : int;
	sex : bool;
	address : string;
	car : Car;	
};

func DoSomething() : string
{
	return "Done";
};

func DoNothingWithReturn() { return; };

func FuncWithParams(bar1: People, bar2 : string) : int
{
	return 5;
};

func FuncWithParams(bar1: char) : int
{
	{
		a = b;
	}
};

func FuncWithStatements() : int
{
	str : string = "foo";
	car.fuel = car1.fuel;
	DoNothing();
	i = 0;
	FuncWithParams(i);
	bar = FuncWithParams(i);
	PICopy = PI;
	if (a > b && isTrue)
	{
	return true;
	}
	if (!isTrue)
	{
	return 1;
	} 
	else
	{
		isTrue = false;
	}

	if (str == "string") { a = b; }

	if (variable == true) {
		a = -a;
	} else if (variable != true) {
		a = true;
	} else {
		return;
	}

	for (i = 5; i > 0; i = 6) {
		continue;
	}
	while (a > b) {
		break;
	}
};

func CycleTests()
{
	for (;;) {break;} 
	for (i = 5; i > 0; i = 6) {
		DoSomething();
	}
	while ((a > b || isTrue || f && (a !=b || c > f)) && (true && false) || IsValid()) {
		DoSomething(i + 1, i);
		a = b;
		for (i = 0; i > PI; i = i + 1) { i++; }
		if (yes) { return; }
	}
	for (i = 0, j = 0; i >= length && j > length; i++, j++) { IsValid(); }
	do  { expr =  a + b * c % 8 / 4.4; } while (true)
};

func SwitchCaseTest(ch : char) : bool
{
	switch (ch) { default: return 1; }
	switch (ch) {
		case 'a' : 
		{
 			a_var = b;
 			break;
		}
		case 'b' : { return true; }
		default : { return false; }
	}
	switch (ch) {
		case 'z' : 
		{
			switch (true) { default: { return true;} }
		}
		default: { return 15; }
	}
};

func ArithmeticTest()
{
	i++;
	i--;
	++i;
	--i;
	//--i++;
	a = a + b - c * 28.3d % 39;
	state : bool = 1 || a == b && isActive;
	state = a && b && c;
};

func TestTernaryOperator()
{
	//a == b ? b = a : a = b;
	return;
};

func AssignTest() 
{
	a += b;
	a /= c;
	a %= f * 5;
	a = d + 0xff;
	a : int = 0;
	a = -b;
	a = +b;
	a : bool = !true;
	result : int = (-a*b)+-b;
};






